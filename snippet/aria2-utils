#!/bin/bash

ARIA2_GIT_CODE() {
    if [[ -d $ARIA2_CODE_DIR && -d $ARIA2_CODE_DIR/.git ]]; then
        cd $ARIA2_CODE_DIR
        git checkout master || git checkout HEAD
        git reset --hard origin || git reset --hard
        git pull
    else
        rm -rf $ARIA2_CODE_DIR
        git clone https://github.com/aria2/aria2 $ARIA2_CODE_DIR
        cd $ARIA2_CODE_DIR
    fi
    autoreconf -fi || autoreconf -fiv
}

ARIA2_RELEASE_CODE() {
    mkdir -p $ARIA2_CODE_DIR && cd $ARIA2_CODE_DIR
    curl -s 'https://api.github.com/repos/aria2/aria2/releases/latest' |
        grep 'browser_download_url.*[0-9]\.tar\.xz' | sed -e 's/^[[:space:]]*//' |
        cut -d ' ' -f 2 | xargs -I % curl -Ls -o - '%' | tar Jxvf - --strip-components=1
}

ARIA2_PATCH() {
    # MAX_CONNECTION_PER_SERVER
    sed -i 's/"1", 1, 16/"16", 1, -1/g' $ARIA2_CODE_DIR/src/OptionHandlerFactory.cc
}

ARIA2_CODE_GET() {
    # ARIA2_RELEASE_CODE
    ARIA2_GIT_CODE
    ARIA2_PATCH
}

ARIA2_BIN() {
    cd $ARIA2_CODE_DIR/src
    if [ -f aria2c.exe ]; then
        $STRIP aria2c.exe
        echo "strip aria2c.exe"
    else
        $STRIP aria2c
        echo "strip aria2c"
    fi
    mkdir -p $OUTPUT_DIR
    cp -p aria2c* $OUTPUT_DIR
}

ARIA2_PACKAGE() {
    cd $ARIA2_CODE_DIR/src
    if [ -f aria2c.exe ]; then
        $STRIP aria2c.exe
        echo "strip aria2c.exe"
    else
        $STRIP aria2c
        echo "strip aria2c"
    fi
    mkdir -p $OUTPUT_DIR
    tar zcvf $OUTPUT_DIR/aria2-static-linux-$ARCH.tar.gz aria2c*
}

CLEANUP() {
    rm -rf $BUILD_DIR
    rm -rf $PREFIX
}
